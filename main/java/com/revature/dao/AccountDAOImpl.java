package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.dto.AddOrEditAccountDTO;
import com.revature.model.Account;
import com.revature.util.ConnectionUtility;

public class AccountDAOImpl implements AccountDAO {

	@Override
	public List<Account> getAllAccounts() throws SQLException {
		List<Account> accounts = new ArrayList<Account>();
		
		// This is known as try-with-resources
		// This works with any type of class that implements the AutoClasable interface
		// Once all of the code inside of the try black is executed (or an exception is caught), it will automatically call .close() on that object
		// In this case it will automatically close the connection for us.
		try (Connection con = ConnectionUtility.getConnection()){
			Statement stmt = con.createStatement();
			
			String sql = "SELECT * FROM project0.account";
			ResultSet rs = stmt.executeQuery(sql);
			
			while (rs.next()) {
				// rs.next() moves the "cursor" forward by one.  It will return true if it successfully moved forward and false if
				// there are no more rows available.
				int id = rs.getInt("id");
				int funds = rs.getInt("funds");
				
				Account account = new Account(id, funds);
				
				accounts.add(account);
			}
		}
		
		return accounts;
	}

	@Override
	public Account getAccountById(int id) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "SELECT * FROM project0.account WHERE id = ?"; // The '?' is a placeholder for a value that we want to provide for our query
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			pstmt.setInt(1, id);
			
			ResultSet rs = pstmt.executeQuery();
			
			if (rs.next()) {
				int account_id = rs.getInt("id");
				int funds = rs.getInt("funds");
				
				Account account = new Account(account_id, funds);
				
				return account;
			} else {
				return null;
			}
		}
	}

	@Override
	public Account addAccount(AddOrEditAccountDTO account) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "INSERT INTO project0.account (funds) VALUES (?)";
			PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			
			pstmt.setInt(1, account.getFunds());
			
			int recordsUpdated = pstmt.executeUpdate();
			
			if (recordsUpdated != 1) {
				throw new SQLException("Could not insert an account record");
			}
			
			ResultSet generatdKeys = pstmt.getGeneratedKeys();
			if (generatdKeys.next()) {
				Account createdAccount = new Account(generatdKeys.getInt(1), account.getFunds());

				return createdAccount;
			} else {
				throw new SQLException("id could not be autogenerated for Account");
			}
		}
	}

	@Override
	public Account editAccount(int accountId, AddOrEditAccountDTO account) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "UPDATE project0.account SET funds = ? WHERE id = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			pstmt.setInt(1, account.getFunds());
			pstmt.setInt(3, accountId);
			
			int recordsUpdated = pstmt.executeUpdate();
			if (recordsUpdated != 1) {
				throw new SQLException("Record was not able to be updated");
			}
			
			return new Account(accountId, account.getFunds());
		}
	}
	
}
